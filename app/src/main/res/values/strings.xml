<resources>
    <string name="app_name">CSIEB0020Companion</string>
    <string name="title_search">Search</string>
    <string name="title_bookmarks">Favorites</string>
    <string name="title_tutorials">Tutorials</string>
    <string name="title_about">About</string>
    <string name="version">Current Version : 1.0.0 - May 2018</string>
    <string name="about">\t<b>CSIE-B0020 Companion</b> is a simple and easy to use app, that allows you to browse basic <b>C</b> libraries and functions.\n\n\tThis tool was designed as a complementary material for the <b>Introduction to Programming(I)</b> class.
    \n\n\tIt is a companion App that features all the basic and common <b>C</b> functions, with clear descriptions and easy to understand tutorials. It was designed by <b>Dong-Hwa University</b> students Guedalia Youma and Indra Kawasan, as part of their Undergraduate research project.
        \n\n\tFor any feedback or inquiries you are welcome to contact us at kevappsgaming@gmail.com or visit Our website.\n\n </string>
    <string name="functions_list">ctype.h  locale.h  math.h  setjmp.h  signal.h  stdarg.h  stdio.h  stdlib.h  string.h  time.h</string>
    <string name="introduction_whatisc">C is a computer programming language. That means that C an be used to create instructions for a computer to follow.\nC is one of the most common programming languages currently in use, it is in fact a very popular programming language.\n\n
        That is why C language is mostly taught in universities as an entry-level course for undergraduates.\n\nC is a compiled language, meaning that once you write your C program, you must run it through a C compiler to turn your
        program into an executable that the computer can run (execute).</string>
    <string name="help_message">\tTo start, first enter the name of a function or a library in the search bar. Some common c function names are : <b>printf, scanf, gets, getc, getchar, toupper, tolower, atoi, malloc, strlen, strcpy and strtok.</b></string>
    <string name="help_message_two">\t10 of the most popular C libraries are featured in this app. Just type a library name in the search bar to query.\nBelow is the list of the featured libraries.</string>
    <string name="help_message_three">\tOr if you dont know what to search, just type <b>\"all\"</b>\n\tIn CSIE-B0020 you also have the option to bookmark your favorite functions, for quick access.Welcome, and\n\n\n</string>
    <string name="help_message_four"><b>let your programming adventure begin!</b></string>
    <string name="getting_started_one">\tProgramming is basically, writing a list of instructions a computer can follow. The person writing a program is known as a programmer (also a coder).\n\t
        The purpose of programming is to find a sequence of instructions that will perform a specific task or solve a given problem.\n\tIn order to obtain the result he desires, the programmer must break the problem into a series of steps, and describe those steps to the computer.</string>
    <string name="getting_started_two">\tProgramming source codes are written in a programming language, and then compiled into an executable that the computer can read.\n\tThe next section of this tutorial will introduce the most popular programming languages, and some tools that a programmer must have.</string>
    <string name="getting_started_three">\tBesides C, there are many other programming languages.\n\tWe usually use <b>C</b> as an entry point for undergraduates because I’ts a “high level language”. That means that <b>C</b> is more like human language, and therefore easier to understand.
        \n\n\tThere are many other high level languages such as <b>C++, Python, Pascal, Java, Ruby, Visual Basic, Delphi</b> etc...</string>
    <string name="getting_started_four">\tA good programmer needs good tools in order to work efficiently.The minimum set that a programmer needs is composed by: a text editor, a compiler, and a debugger.\n\tAll these three tools are combined in a unique software called <b>IDE</b> (Integrated development environment).
        \n\n\tOne of the most common IDE is <b>Code::Blocks</b>, it’s free and works on Windows, Mac and Linux. However, Mac users usually prefer <b>Xcode</b>, which only operates on Mac OS X.\n\n\t
        Below you have a list of some programming tools I personally recommend.\nSome of them are IDEs, others such as <b>Sublime Text</b> and <b>Visual Studio Code</b> are powerful Text Editors.</string>
    <string name="getting_started_five">\t<b>CSIE-B0020 Companion</b> is a great programming reference, for Computer Science students and programming enthusiasts in general.\n\tIt is a programming tool that works offline and a great pastime for boring places.
        \n\n\tThis tool was designed to enhance Computer Science students overall learning experience, and help them get more familiar with the <b>C</b> language.</string>
    <string name="getting_started_six"><b>Happy Coding ^_^</b></string>
    <string name="hello_world_one">\tHello world is the first program that a student who is interested in learning <b>C</b> should learn.\nIt is basically just writing the minimal code that prints a message on the screen.\n\n
        \tIt’s a basic but very important program. Indeed, a good understanding of its structure will set a good basis for solving further problems.\n\tIn this tutorial, we will give a detailed explanation of the <b>C</b> Hello World program.</string>
    <string name="hello_world_two">\tThe hello world program is very simple. Basically, we just have to call the function <b>printf</b> (which prints text on the screen) with the desired message as its argument, and thats it!!\n\tHowever, lets have a detailed review of the source code (shown below) for a better understanding.</string>
    <string name="hello_world_three">\tFirst of all, please <b>NOTE</b> that the <b>main()</b> function is essential to any <b>C</b> program.\n\tThe program execution always starts by the <b>main()</b> function.\n\tFurthermore <b>main()</b> cannot be called by any function, it is just en entry point for the compiler to start executing the code.</string>
    <string name="hello_world_four">The basic <b>C</b> Hello World program is composed by:\n\n
        <b>\tThe Preprocessor Commands:</b> Preprocessor commands always begin with a <b>#</b> (hash) symbol.\nThey are either used to include files (libraries, header files, etc..) into the source code, or define tokens that will be used at compile time.\n\n
        <b>\tThe main function:</b> As said above, the main function is the central part of every <b>C</b> program.\n In the body of the main function, there are statements that provide each, an instruction to the computer.\n\n
        <b>\tStatements:</b> There are many kinds of statements in <b>C</b> language (variable declaration, function call, assignment statement, etc..).\n However, in this problem, we only had to call the <b>printf()</b> function, which is part of the <b>stdio.h</b> (Standard Input Output) library, to print the “Hello World” message.\n\n
        <b>\tThe return statement:</b> The return statement terminates the current function, and returns a value.\nIn fact, each function has a return type, and sometimes takes parameters.\nIn case the return type is <b>void</b> (void = “empty” or “nothing”), we may not add a return statement.
        \nOtherwise, we need to return a value of the same category as the return type.\nIn our current example, our return type is <b>int</b> (int = integer), therefore at the bottom of the function, we need to terminate by returning an integer (here we chose 0).</string>
    <string name="hello_world_five">\tThe <b>“Hello World”</b> problem is the first problem that students will encounter in a <b>C</b> programming course.\n\tHere, we tried to break the Hello World program, to help readers understand the basic component of a <b>C</b> source code.
        \n\tIn the next tutorials, we will move forward and explore more advanced <b>C</b> programming concepts.</string>
    <string name="aplusb_one">\tAfter “Hello World”, the A + B Problem is the next problem that <b>C</b> learners will encounter.\n\tThe A + B problem is also very basic. In this tutorial we will do it in 2 different ways, since we want to encourage a more open teaching methodology.
        \n\n\tTherefore, we will first solve it using the classic method, and we will also introduce a way of solving it by creating a function that performs the addition.</string>
    <string name="aplusb_two">\tOur first approach to solve this problem, is by simply declaring two variables, that we will ask the user to input (through the <b>scanf()</b> function), and then displaying the result of their addition (using <b>printf()</b>).</string>
    <string name="aplusb_three">\tAnother way to solve the A+B problem is by writing a function that will take the two numbers as arguments, add them, and then return the result as its return value.
        \n\tIn fact, the <b>C</b> language allows you to write your own functions.\n\tThis concept is usually explained later in a programming course, after students have mastered more basic concepts such as, variables declaration and initialization, <b>C</b> data types etc…
        \n\tHowever, we chose to add the source code below, to remind you that there are many ways to solve a problem in <b>C</b>, and to give you a preview of what will be taught later on.</string>
    <string name="aplusb_four">\tThe A+B Problem is another very classic problem that is given to beginners in <b>C</b>.\n\tOne more time, we remind you that these basic programs must not be overlooked, since a good understanding of these classic problems will open the way for efficient coding, and good programming habits.</string>
    <string name="integer_sorting_one">\tOne useful and classic concept in <b>C</b> is sorting numbers.\n\tIt can be either asked as an independent programming problem, or used to build a more complex problem. Therefore, it is very useful to master the concept of numbers sorting.
        \n\tThere are many sorting algorithms in <b>C</b> (<b>selection sort, bubble sort, insertion sort, quick sort,</b> etc…).\n\tThe source code below uses one of the most popular: <b>bubble sort</b>.</string>
    <string name="integer_sorting_two">\tBubble sort is the simplest programming algorithm.\n\tIt works by comparing two successive elements of an array, and swapping them if a certain condition is met.
        \n\tIn order to sort in ascending number, the condition for swapping will be that the first element is greater than the second. We apply the opposite condition; in case we want to sort in descending order.\n\n\tSince a figure is worth thousands word, we provided this figure for a better understanding.</string>
    <string name="integer_sorting_three">\tNumber sorting is a very important concept in <b>C</b>.\n\tNumerous problems are based on this concept, and it is therefore important to have a good understanding of how it works.
        \n\tNote that although bubble sort is the most popular sorting algorithm, it is not the fastest or the most efficient.\n\tBubble sort is not recommended to sort large data, and sometimes leads to a longer execution time and thus, to lower performances.</string>
    <string name="pointers_one">\tPointers are one of the most feared concept by students.\n\tIt is usually labeled as “hard” even tough it’s quite simple to understand.\n\tIn this tutorial, we will try to briefly introduce the concept of pointers in C, and describe a basic source code, to have a more practical understanding.</string>
    <string name="pointers_two">\tA pointer is simply a variable whose value is the address (address of the memory emplacement) of another variable.\n\tNow, you might ask: “Why would we choose to use a variable’s memory address instead of directly using its value?”.
        \n\tThe answer is simple: when a (local) variable is passed as an argument into a function, a copy of this variable is created.\n\tTherefore, any modification that takes places in the called function, does not affect the original variable.\n\tWe suggest that you take the time to understand the code below before going further.</string>
    <string name="pointers_three">\tAt this point, it must already be clear that pointers enable us to modify the original value of a function\’s parameter.\n\tThis is one of the many usages of a pointer.\n\tLet’s rewrite our code using a pointer this time, we note that the number is successfully multiplied by 3.</string>
    <string name="pointers_four">\n\tNote that <b>&amp;</b> is called the <b>Reference operator</b>, and <b>*</b> is called the <b>Dereference operator</b>.\n\tThe <b>reference</b> operator gives you the address of a variable, while the <b>dereference operator</b> gets you the value from that address.
        \n\tIt is important to note that, the sign <b>*</b> when creating a pointer is not a dereference operator.\n\tIt is just a similar notation that creates a pointer.\n\tA good practice for us, would be to retry the <b>A + B problem using pointers</b>.</string>
    <string name="pointers_five">\n\tThe concept of pointers is very important in <b>C</b> language.\n\tAlthough pointers are sometimes feared by students, they are very useful and appear in numerous <b>C</b> problems.
        \n\tThis tutorial was a good introduction to pointers in <b>C</b>, and we believe that with enough practice, pointers will become one of your favorite playgrounds <b>(^_^)</b>.</string>
</resources>
